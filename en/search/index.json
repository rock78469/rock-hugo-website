[{"content":"Illustrate Because the Docker Desktop installed on MacOS cannot use the Docker Remote API\nSo you can use socate image to enable this service\n1 2 3 docker run -d --name socat --restart always \\ -p 2375:2375 \\ -v /var/run/docker.sock:/var/run/docker.sock alpine/socat tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock Modify environment variables 1 2 3 $vim ~/.bash_profile export DOCKER_HOST=tcp://localhost:2375 $source .bash_profile Confirm docker remote api available 1 curl localhost:2375/version ","date":"2023-03-17T00:00:00Z","permalink":"https://blog.rock86.space/en/p/open-docker-remote-api-on-mac/","title":"Open Docker Remote API on Mac"},{"content":"Folder structure 1 2 3 4 5 6 7 8 9 ├── GeoLite │ └── GeoLite2-City.mmdb ├── config │ └── nginx.conf ├── log │ ├── access.log │ └── error.log ├── dockerfile └── docker-compose Step1. Dockerfile build 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 # 1-1.：compile GeoIP2 Package and Nginx FROM debian:buster-slim AS builder # FROM debian:buster-slim # Install kits and tools RUN apt-get update \u0026amp;\u0026amp; \\ apt-get install -y libmaxminddb-dev wget build-essential \u0026amp;\u0026amp; \\ rm -rf /var/lib/apt/lists/* # Download、compile and install GeoIP2 module RUN wget https://github.com/maxmind/libmaxminddb/releases/download/1.6.0/libmaxminddb-1.6.0.tar.gz \u0026amp;\u0026amp; \\ tar xvfz libmaxminddb-1.6.0.tar.gz \u0026amp;\u0026amp; \\ cd libmaxminddb-1.6.0 \u0026amp;\u0026amp; \\ ./configure \u0026amp;\u0026amp; \\ make \u0026amp;\u0026amp; \\ make install \u0026amp;\u0026amp; \\ ldconfig \u0026amp;\u0026amp; \\ cd .. \u0026amp;\u0026amp; \\ rm -rf libmaxminddb-1.6.0 libmaxminddb-1.6.0.tar.gz # Download、compile and install ngx_http_geoip2_module module RUN wget https://github.com/leev/ngx_http_geoip2_module/archive/master.tar.gz \u0026amp;\u0026amp; \\ tar xvfz master.tar.gz \u0026amp;\u0026amp; \\ rm -rf master.tar.gz \u0026amp;\u0026amp; \\ mv ngx_http_geoip2_module-master /usr/src/nginx-geoip2 # Download、unzip,and compile Pcre module RUN wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz \u0026amp;\u0026amp; \\ tar zxvf pcre-8.35.tar.gz \u0026amp;\u0026amp; \\ cd pcre-8.35 \u0026amp;\u0026amp; \\ ./configure \u0026amp;\u0026amp; \\ make \u0026amp;\u0026amp; make install \u0026amp;\u0026amp; \\ cd .. # Download、unzip,and compile Zlib module RUN wget http://zlib.net/zlib-1.2.13.tar.gz \u0026amp;\u0026amp; \\ tar zxvf zlib-1.2.13.tar.gz \u0026amp;\u0026amp; \\ cd zlib-1.2.13 \u0026amp;\u0026amp; \\ ./configure \u0026amp;\u0026amp; \\ make \u0026amp;\u0026amp; make install \u0026amp;\u0026amp; \\ cd .. # Download、unzip,and compile Nginx RUN wget http://nginx.org/download/nginx-1.21.3.tar.gz \u0026amp;\u0026amp; \\ tar xvfz nginx-1.21.3.tar.gz \u0026amp;\u0026amp; \\ cd nginx-1.21.3 \u0026amp;\u0026amp; \\ ./configure --with-compat --add-dynamic-module=/usr/src/nginx-geoip2 \u0026amp;\u0026amp; \\ make modules \u0026amp;\u0026amp; \\ cd .. # 1-2：Build final image FROM nginx:1.21.3 # Copy ngx_http_geoip2_module module from compiled step1 COPY --from=builder /nginx-1.21.3/objs/ngx_http_geoip2_module.so /etc/nginx/modules/ # Install GeoIP2 repo and tools RUN apt-get update \u0026amp;\u0026amp; \\ apt-get install -y libmaxminddb0 mmdb-bin \u0026amp;\u0026amp; \\ rm -rf /var/lib/apt/lists/* # Copy GeoIP2 repo COPY --from=builder /usr/local/lib/libmaxminddb.so.* /usr/local/lib/ ADD ./GeoLite/GeoLite2-Country_20230221/GeoLite2-Country.mmdb /usr/share/GeoIP/ # Config Nginx to enable GeoIP2 module # RUN sed -i \u0026#39;/http {/a \\ geoip2 /usr/share/GeoIP/GeoLite2-Country.mmdb {\\n auto_reload 60m;\\n $geoip2_metadata_country_build metadata build_epoch;\\n $geoip2_data_country_code country iso_code;\\n }\u0026#39; /etc/nginx/nginx.conf \u0026amp;\u0026amp; \\ # sed -i \u0026#39;1 i load_module modules/ngx_http_geoip2_module.so;\u0026#39; /etc/nginx/nginx.conf CMD [\u0026#34;nginx\u0026#34;, \u0026#34;-g\u0026#34;, \u0026#34;daemon off;\u0026#34;] Step2. Run Docker commend and build Image 1 docker build -t my-nginx . Create folder\n1 2 3 4 5 6 # Create folder for nginx.conf mkdir config # Create folder for nginx access.log and error.log mkdir log # Create folder for GeoLite repo mkdir GeoLite Step3. Config Nginx.conf Change nginx log format to json\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 load_module modules/ngx_http_geoip2_module.so; user nginx; worker_processes auto; error_log /var/log/nginx/error.log notice; pid /var/run/nginx.pid; events { worker_connections 1024; } http { geoip2 /usr/share/GeoIP/GeoLite2-Country.mmdb { auto_reload 60m; $geoip2_data_city_name city names en; $geoip2_data_city_latitude location latitude; $geoip2_data_city_longitude location longitude; $geoip2_data_country_iso_code country iso_code; } include /etc/nginx/mime.types; default_type application/octet-stream; # log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39; # \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; # \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; # log_format custom \u0026#39;$remote_addr - $remote_user [$time_local]\u0026#39; # \u0026#39;\u0026#34;$request\u0026#34; $status $body_bytes_sent\u0026#39; # \u0026#39;\u0026#34;$http_referer\u0026#34; $host \u0026#34;$http_user_agent\u0026#34;\u0026#39; # \u0026#39;\u0026#34;$request_time\u0026#34; \u0026#34;$upstream_connect_time\u0026#34;\u0026#39; # \u0026#39;\u0026#34;$geoip2_data_city_name\u0026#34; \u0026#34;$geoip2_data_country_iso_code\u0026#34;\u0026#39;; log_format main2 \u0026#39;{\u0026#34;remote_addr\u0026#34;:\u0026#34;$remote_addr\u0026#34;,\u0026#34;remote_user\u0026#34;:\u0026#34;$remote_user\u0026#34;,\u0026#34;time\u0026#34;:\u0026#34;$time_local\u0026#34;,\u0026#34;request\u0026#34;:\u0026#34;$request\u0026#34;,\u0026#34;status\u0026#34;:\u0026#34;$status\u0026#34;,\u0026#34;body_bytes_sent\u0026#34;:\u0026#34;$body_bytes_sent\u0026#34;,\u0026#34;http_referer\u0026#34;:\u0026#34;$http_referer\u0026#34;,\u0026#34;host\u0026#34;:\u0026#34;$host\u0026#34;,\u0026#34;http_user_agent\u0026#34;:\u0026#34;$http_user_agent\u0026#34;,\u0026#34;request_time\u0026#34;:\u0026#34;$request_time\u0026#34;,\u0026#34;upstream_connect_time\u0026#34;:\u0026#34;$upstream_connect_time\u0026#34;,\u0026#34;geoip2_data_city_name\u0026#34;:\u0026#34;$geoip2_data_city_name\u0026#34;,\u0026#34;geoip2_data_country_iso_code\u0026#34;:\u0026#34;$geoip2_data_country_iso_code\u0026#34;,\u0026#34;geoip2_data_city_latitude\u0026#34;:\u0026#34;$geoip2_data_city_latitude\u0026#34;,\u0026#34;geoip2_data_city_longitude\u0026#34;:\u0026#34;$geoip2_data_city_longitude\u0026#34;}\u0026#39;; access_log /var/log/nginx/access.log main2; sendfile on; #tcp_nopush on; keepalive_timeout 65; #gzip on; include /etc/nginx/conf.d/*.conf; } } Step4. Apply GeoLite Database Link\nSelect Sign up GeoIP2 After entering personal information, click Continue to complete the registration Download Download Page Select download GeoLite2 City Put the decompressed GeoLite2-City.mmdb into the GeoLite folder Step5. Write Docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 version: \u0026#39;3.5\u0026#39; services: nginx: image: mynginx:latest container_name: mynginx ports: - 8081:80 volumes: - ./nginx/config/nginx.conf:/etc/nginx/nginx.conf - ./nginx/log:/var/log/nginx - ./GeoLite/GeoLite2-City.mmdb:/usr/share/GeoIP networks: - nginx_network networks: nginx_network name: nginx_network driver: bridge Step6. Run mynginx 1 docker-compose up -d ","date":"2023-03-09T00:00:00Z","permalink":"https://blog.rock86.space/en/p/nginx-geoip2-in-docker/","title":"Nginx GeoIP2 in Docker"}]